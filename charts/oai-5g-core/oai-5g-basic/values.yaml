global:
  kubernetesDistribution: Vanilla #Openshift/Vanilla Kubernetes for Upstream Kubernetes
  coreNetworkConfigMap: oai-5g-basic
  clusterIpServiceIpAllocation: true #this will allocate ip-address to cluster Ip service
  IP_NRF: @IP_NRF@ 
  waitForNRF: true
  waitForUDR: true
  http2Param: "--http2-prior-knowledge"  # if waitForNRF is true and http2 is used for all NF then this param is needed
  timeout: 1
mysql:
  enabled: @ENABLED_MYSQL@ #true
  imagePullPolicy: IfNotPresent
  oai5gdatabase: basic
  imagePullSecrets:
    - name: "regcred"
  persistence:
    enabled: false
oai-nrf:
  enabled: @ENABLED_NRF@ #true
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-nrf          ## The image will be pulled from dockerhub
    version: develop                          ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #only for taking pcaps inside network function pod
  ## Only if you want to store all pcaps in persistent volume
  persistent:
    sharedvolume: @SHAREDVOLUME@
    #storageClass: "nfs-client" #If value is "-" default storageClass will be used
    storageClass: "-"
    size: 1Gi
  start:
    nrf: true #If false the network function container will run in sleep mode for manually testing
    tcpdump: @START_TCPDUMP@
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-lmf:
  enabled: true
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-lmf          ## The image will be pulled from dockerhub
    version: develop                          ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #only for taking pcaps inside network function pod
  persistent:
    sharedvolume: @SHAREDVOLUME@
  start:
    lmf: true #If false the network function container will run in sleep mode for manually testing
    tcpdump: @START_TCPDUMP@
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-udr:
  enabled: @ENABLED_UDR@ #true
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-udr           ## The image will be pulled from dockerhub
    version: develop                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #only for taking pcaps inside network function pod
  ## Only if you want to store all pcaps in persistent volume
  persistent:
    sharedvolume: @SHAREDVOLUME@
  start:
    udr: true #If false the network function container will run in sleep mode for manually testing
    tcpdump: @START_TCPDUMP@
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-udm:
  enabled: @ENABLED_UDM@ #true
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-udm           ## The image will be pulled from dockerhub
    version: develop                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #only for taking pcaps inside network function pod
  ## Only if you want to store all pcaps in persistent volume
  persistent:
    sharedvolume: @SHAREDVOLUME@
  start:
    udm: true #If false the network function container will run in sleep mode for manually testing
    tcpdump: @START_TCPDUMP@
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-ausf:
  enabled: @ENABLED_AUSF@ #true
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-ausf           ## The image will be pulled from dockerhub
    version: develop                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #only for taking pcaps inside network function pod
  ## Only if you want to store all pcaps in persistent volume
  persistent:
    sharedvolume: @SHAREDVOLUME@
  start:
    ausf: true #If false the network function container will run in sleep mode for manually testing
    tcpdump: @START_TCPDUMP@
  imagePullSecrets:
    - name: "regcred"
  securityContext:
    privileged: @PRIVILEGED@
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-amf:
  enabled: @ENABLED_AMF@ #true
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-amf           ## The image will be pulled from dockerhub
    version: develop                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #only for taking pcaps inside network function pod
  ## Only if you want to store all pcaps in persistent volume
  persistent:
    sharedvolume: @SHAREDVOLUME@
  start:
    amf: true #If false the network function container will run in sleep mode for manually testing
    tcpdump: @START_TCPDUMP@
  imagePullSecrets:
    - name: "regcred"
  securityContext:
    privileged: @PRIVILEGED@
  multus:
    ## If you don't want to add a default route in your pod then replace this field with ""
    defaultGateway: "@CN_DEFAULT_GW@"
    n2Interface:
      create: @MULTUS_AMF_N2@
      ipAdd: "@IP_AMF_N2@"
      netmask: "@NETMASK_AMF_N2@"
      ## If you do not need a specific mac address leave the field empty
      mac: "@MAC_AMF_N2@"
      name: "n2"
      ## If you do not have a gateway leave the field empty
      gateway: "@GW_AMF_N2@"
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: @ROUTES_AMF_N2@
      hostInterface: "@IF_NAME_AMF_N2@" # Interface of the host machine on which this pod will be scheduled
  nodeSelector: {}
  nodeName: @NODE_AMF@
oai-upf:
  enabled: @ENABLED_UPF@ #true
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-upf    ## The image will be pulled from dockerhub
    version: develop                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #only for taking pcaps inside network function pod
  ## Only if you want to store all pcaps in persistent volume
  persistent:
    sharedvolume: @SHAREDVOLUME@
  start:
    upf: true #If false the network function container will run in sleep mode for manually testing
    tcpdump: @START_TCPDUMP@
  imagePullSecrets:
    - name: "regcred"
  securityContext:
    privileged: true # @PRIVILEGED@ # upf fails without privilege mode on rocky
  # create an extra interface for N3 incase the gNB is outside the cluster network or there is a need to have dedicated interface for N3
  ## Change these ip-addresses according to your environment
  ## N4, N6 are optional only if you want that UPF uses different subnets for different 3gpp interfaces. 
  multus:
    ## If you don't want to add a default route in your pod then replace this field with ""
    defaultGateway: "@CN_DEFAULT_GW@"
    n3Interface:
      create: @MULTUS_UPF_N3@
      ipAdd: "@IP_UPF_N3@"
      netmask: "@NETMASK_UPF_N3@"
      ## If you do not need a specific mac address leave the field empty
      mac: "@MAC_UPF_N3@"
      name: "n3"
      ## If you do not have a gateway leave the field empty
      gateway: "@GW_UPF_N3@"
      ## If you don't want to add a default route in your pod then replace this field with ""
      routes: @ROUTES_UPF_N3@
      hostInterface: "@IF_NAME_UPF_N3@"
    ## For n4 it is better to re-use eth0 interface inside the pod (primary CNI of Kubernetes)
    n4Interface:
      create: @MULTUS_UPF_N4@
      ipAdd: "@IP_UPF_N4@"
      netmask: "@NETMASK_UPF_N4@"
      ## If you do not need a specific mac address leave the field empty
      mac: "@MAC_UPF_N4@"
      name: "n4"
      ## If you do not have a gateway leave the field empty
      gateway: "@GW_UPF_N4@"
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: @ROUTES_UPF_N4@
      hostInterface: "@IF_NAME_UPF_N4@"
    n6Interface:
      create: @MULTUS_UPF_N6@
      ipAdd: "@IP_UPF_N6@"
      name: "n6"
      netmask: "@NETMASK_UPF_N6@"
      ## If you do not need a specific mac address leave the field empty
      mac: "@MAC_UPF_N6@"
      ## If you do not have a gateway leave the field empty
      gateway: "@GW_UPF_N6@"
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: @ROUTES_UPF_N6@
      hostInterface: "@IF_NAME_UPF_N6@"
  #NOTE: If the interface you selected for n6If is wrong then traffic will not be routed towards internet
  nodeSelector: {}
  nodeName: @NODE_UPF@
oai-traffic-server:
  enabled: @ENABLED_TS@ #true
  trafficServer:
    repository: docker.io/oaisoftwarealliance/trf-gen-cn5g
    version: latest
    #pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  multus:
    create: @MULTUS_TS@
    ipAdd: "@IP_TS@"
    netmask: "@NETMASK_TS@"
    ## If you do not need a specific mac address leave the field empty
    mac: "@MAC_TS@"
    defaultGateway: "@GW_TS@"
    ## If you do not want to add any routes in your pod then leave this field empty
    hostInterface: "@IF_NAME_TS@"  # Interface of the host machine on which this pod will be scheduled
  config:
    ueroute: 12.1.1.0/24
    upfHost: @UPF_HOST@
    routeInterface: eth0
    noOfIperf3Server: 2
  resources:
    define: false
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
  nodeSelector: {}
  nodeName: @NODE_TS@
oai-smf:
  enabled: @ENABLED_SMF@ #true
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-smf           ## The image will be pulled from dockerhub
    version: develop                         ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #only for taking pcaps inside network function pod
  ## Only if you want to store all pcaps in persistent volume
  persistent:
    sharedvolume: @SHAREDVOLUME@
  start:
    smf: true #If false the network function container will run in sleep mode for manually testing
    tcpdump: @START_TCPDUMP@
  multus:
    ## If you don't want to add a default route in your pod then replace this field with ""
    defaultGateway: "@CN_DEFAULT_GW@"
    n4Interface:
      create: @MULTUS_SMF_N4@
      ipAdd: "@IP_SMF_N4@"
      netmask: "@NETMASK_SMF_N4@"
      ## If you do not need a specific mac address leave the field empty
      mac: "@MAC_SMF_N4@"
      ## If you do not have a gateway leave the field empty
      gateway: "@GW_SMF_N4@"
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: @ROUTES_SMF_N4@
      hostInterface: "@IF_NAME_SMF_N4@"
  imagePullSecrets:
    - name: "regcred"
  securityContext:
    privileged: @PRIVILEGED@
  nodeSelector: {}
  nodeName: @NODE_SMF@
